openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/auth/login/:
    post:
      operationId: api_auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/auth/login/refresh/:
    post:
      operationId: api_auth_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/register/:
    post:
      operationId: api_auth_register_create
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/chat-sessions/:
    get:
      operationId: api_chat_sessions_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatSession'
          description: ''
  /api/chat-sessions/{id}/:
    get:
      operationId: api_chat_sessions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSession'
          description: ''
  /api/chat-sessions/{session_id}/messages/:
    get:
      operationId: api_chat_sessions_messages_list
      parameters:
      - in: path
        name: session_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
          description: ''
  /api/chatbots/:
    get:
      operationId: api_chatbots_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chatbot'
          description: ''
    post:
      operationId: api_chatbots_create
      tags:
      - api
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Chatbot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Chatbot'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chatbot'
          description: ''
  /api/chatbots/{id}/:
    get:
      operationId: api_chatbots_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this chatbot.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chatbot'
          description: ''
    put:
      operationId: api_chatbots_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this chatbot.
        required: true
      tags:
      - api
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Chatbot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Chatbot'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chatbot'
          description: ''
    patch:
      operationId: api_chatbots_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this chatbot.
        required: true
      tags:
      - api
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatbot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatbot'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chatbot'
          description: ''
    delete:
      operationId: api_chatbots_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this chatbot.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/generate-response/:
    post:
      operationId: api_generate_response_create
      description: Generate a bot response for a user message
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
            examples:
              UserMessageExample:
                value:
                  original_text: Hello, can you help me?
                  chatbot_id: uuid-string-here
                  session_id: uuid-string-here
                summary: User message example
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/messages/:
    get:
      operationId: api_messages_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
          description: ''
  /api/messages/{id}/:
    get:
      operationId: api_messages_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
components:
  schemas:
    ChatSession:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        chatbot:
          allOf:
          - $ref: '#/components/schemas/Chatbot'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - chatbot
      - created_at
      - id
    Chatbot:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        documents:
          type: array
          items:
            type: string
            format: uri
          writeOnly: true
        name:
          type: string
          maxLength: 100
        primary_color:
          type: string
          maxLength: 7
        logo:
          type: string
          format: uri
          nullable: true
        text_color:
          type: string
          maxLength: 7
        welcome_message:
          type: string
          nullable: true
        welcome_popup:
          type: string
          nullable: true
        chat_input:
          type: string
          nullable: true
      required:
      - documents
      - id
      - name
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        session_id:
          type: string
          format: uuid
          nullable: true
        original_text:
          type: string
        sender:
          $ref: '#/components/schemas/SenderEnum'
        timestamp:
          type: string
          format: date-time
          readOnly: true
        chatbot_id:
          type: string
          format: uuid
          writeOnly: true
      required:
      - chatbot_id
      - id
      - original_text
      - sender
      - session_id
      - timestamp
    PatchedChatbot:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        documents:
          type: array
          items:
            type: string
            format: uri
          writeOnly: true
        name:
          type: string
          maxLength: 100
        primary_color:
          type: string
          maxLength: 7
        logo:
          type: string
          format: uri
          nullable: true
        text_color:
          type: string
          maxLength: 7
        welcome_message:
          type: string
          nullable: true
        welcome_popup:
          type: string
          nullable: true
        chat_input:
          type: string
          nullable: true
    SenderEnum:
      enum:
      - user
      - bot
      - admin
      type: string
      description: |-
        * `user` - User
        * `bot` - Bot
        * `admin` - Admin
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
